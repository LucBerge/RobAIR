#!/bin/bash

PIDFILE="/run/user/$UID/robair.pid"

if [ -z $ROBAIR_HOME ]; then
  export ROBAIR_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
  source "$ROBAIR_HOME/scripts/env.bash"
fi

startme() {
  if is_running; then
    echo "RobAIR est déjà en cours d'exécution"
    exit 1
  fi

  if [ ! -f $ROBAIR_HOME/interface/config.json ]; then
    cp $ROBAIR_HOME/interface/config.json.default $ROBAIR_HOME/interface/config.json
  fi

  find_ip

  if ! find_arduino; then
    echo "Aucune carte Arduino trouvée" >> /dev/stderr
    exit 1
  fi

  export ROS_IP=$ROBAIR_IP

  roslaunch robairmain robair.launch >>/dev/null 2>&1 &
  echo "$!" > "$PIDFILE"
}

is_running() {
  [ -f "$PIDFILE" ] || return 1
  cmd=$(ps --no-headers --pid $(< "$PIDFILE") -o comm)
  test "$cmd" = "roslaunch"
}

stopme() {
  [ -f "$PIDFILE" ] || return 1
  kill -SIGINT $(< "$PIDFILE")
  while is_running; do
    sleep 0.5
  done
  rm -f "$PIDFILE"
}

restart() {
  pkill -9 -f "robairmain/proxy"
  stopme
  startme
}

find_ip() {
  ROBAIR_IP=$(ip route get 8.8.8.8 2>>/dev/null | awk 'NR==1 {print $NF}')
  if [ "x$ROBAIR_IP" = 'x' ]; then
    ROBAIR_IP=localhost
  fi

  export ROBAIR_IP

  last_ip_file="$ROBAIR_HOME/configs/.last_ip"

  if [ -f "$last_ip_file" ] &&
    [ "$ROBAIR_IP" = "$(< "$last_ip_file")" ]; then
    return 0
  fi


  # The address changed since last time

  $ROBAIR_HOME/scripts/createDeviceCRT.bash

  if [[ ! -f  $ROBAIR_HOME/interface/public/common/js/config.js ]]; then
    cp $ROBAIR_HOME/interface/public/common/js/config.js.default \
      $ROBAIR_HOME/interface/public/common/js/config.js
  fi

  sed -i -e 's#\(.*serverurl *: \).*#\1"'"$ROBAIR_IP"'",#' \
    $ROBAIR_HOME/interface/public/common/js/config.js

  [ -f ~/.config/chromium/Default/Bookmarks ] &&
    sed -i -e '/Robair/,/https/{s#\(.*"url":\).*#\1"https://'"$ROBAIR_IP"':6080/"#}' \
      ~/.config/chromium/Default/Bookmarks

  echo "$ROBAIR_IP" > "$last_ip_file"
}

find_arduino()
{
  ROBAIR_ARDUINO="$(ls /dev/serial/by-id/*Arduino* 2>>/dev/null)"
  if [ $? -ne 0 ]; then
    return 1;
  fi
  export ROBAIR_ARDUINO
}

do_reload() {
  (cd catkin_ws && catkin_make install)
  rm -rf arduino/libraries/ros_lib
  rosrun rosserial_arduino make_libraries.py arduino/libraries
  (cd arduino/robairarduino && make upload)
}

reload() {
  cd "$ROBAIR_HOME"
  was_running=$(is_running)
  stopme
  do_reload
  [ "$was_running" -eq 0 ] && startme
}

update() {
  cd "$ROBAIR_HOME"
  stopme
  git fetch
  git reset --hard origin/master
  git submodule update --init
  ./scripts/run-migrations
  do_reload
  echo "$(tput setaf 2)RobAIR a été mis à jour$(tput sgr0)"
}

print_ip() {
  find_ip
  echo "$ROBAIR_IP"
}

case "$1" in
    start)   startme ;;
    stop)    stopme ;;
    restart) restart ;;
    reload) reload ;;
    update) update ;;
    ip) print_ip ;;
    *) echo "usage: $0 start|stop|restart|reload|update" >&2
       exit 1
       ;;
esac
